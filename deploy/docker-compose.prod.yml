version: '3.8'

services:
  # ================================
  # Main Application
  # ================================
  openmanus:
    build:
      context: .
      dockerfile: Dockerfile.production
      target: production
    container_name: openmanus-app
    restart: unless-stopped
    ports:
      - "8000:8000"
      - "9090:9090"  # Metrics port
    environment:
      - DATABASE_URL=postgresql+asyncpg://openmanus:${POSTGRES_PASSWORD}@postgres:5432/openmanus
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
    env_file:
      - .env.production
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
      - ./downloads:/app/downloads
      - ./certs:/app/certs:ro
      - ./data:/app/data
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - openmanus-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # ================================
  # Celery Worker
  # ================================
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile.production
      target: production
    container_name: openmanus-celery-worker
    restart: unless-stopped
    command: celery -A app.tasks.celery worker --loglevel=info --concurrency=4
    environment:
      - DATABASE_URL=postgresql+asyncpg://openmanus:${POSTGRES_PASSWORD}@postgres:5432/openmanus
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
    env_file:
      - .env.production
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
      - ./downloads:/app/downloads
      - ./data:/app/data
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - openmanus-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # ================================
  # Celery Beat (Scheduler)
  # ================================
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile.production
      target: production
    container_name: openmanus-celery-beat
    restart: unless-stopped
    command: celery -A app.tasks.celery beat --loglevel=info
    environment:
      - DATABASE_URL=postgresql+asyncpg://openmanus:${POSTGRES_PASSWORD}@postgres:5432/openmanus
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
    env_file:
      - .env.production
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - openmanus-network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.1'

  # ================================
  # PostgreSQL Database
  # ================================
  postgres:
    image: postgres:15-alpine
    container_name: openmanus-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: openmanus
      POSTGRES_USER: openmanus
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5432:5432"
    networks:
      - openmanus-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U openmanus -d openmanus"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # ================================
  # Redis Cache
  # ================================
  redis:
    image: redis:7-alpine
    container_name: openmanus-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    ports:
      - "6379:6379"
    networks:
      - openmanus-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'

  # ================================
  # Nginx Reverse Proxy
  # ================================
  nginx:
    image: nginx:alpine
    container_name: openmanus-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx-sites:/etc/nginx/conf.d:ro
      - ./certs:/etc/nginx/certs:ro
      - ./logs/nginx:/var/log/nginx
      - ./static:/var/www/static:ro
    depends_on:
      - openmanus
    networks:
      - openmanus-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ================================
  # Prometheus Monitoring
  # ================================
  prometheus:
    image: prom/prometheus:latest
    container_name: openmanus-prometheus
    restart: unless-stopped
    ports:
      - "9091:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - openmanus-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'

  # ================================
  # Grafana Dashboard
  # ================================
  grafana:
    image: grafana/grafana:latest
    container_name: openmanus-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: false
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./config/grafana/dashboards:/var/lib/grafana/dashboards:ro
    depends_on:
      - prometheus
    networks:
      - openmanus-network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

  # ================================
  # Elasticsearch (Logging)
  # ================================
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: openmanus-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - openmanus-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # ================================
  # Kibana (Log Visualization)
  # ================================
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: openmanus-kibana
    restart: unless-stopped
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - openmanus-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'

  # ================================
  # Logstash (Log Processing)
  # ================================
  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    container_name: openmanus-logstash
    restart: unless-stopped
    volumes:
      - ./config/logstash/pipeline:/usr/share/logstash/pipeline:ro
      - ./config/logstash/config:/usr/share/logstash/config:ro
      - ./logs:/app/logs:ro
    depends_on:
      - elasticsearch
    networks:
      - openmanus-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'

  # ================================
  # Backup Service
  # ================================
  backup:
    build:
      context: .
      dockerfile: Dockerfile.backup
    container_name: openmanus-backup
    restart: unless-stopped
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=openmanus
      - POSTGRES_USER=openmanus
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - BACKUP_S3_BUCKET=${BACKUP_S3_BUCKET}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    volumes:
      - ./backups:/backups
      - ./data:/app/data:ro
    depends_on:
      - postgres
    networks:
      - openmanus-network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.1'

# ================================
# Networks
# ================================
networks:
  openmanus-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ================================
# Volumes
# ================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local

