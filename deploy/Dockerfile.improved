# Multi-stage Dockerfile for OpenManus
# Supports local development, Render, and AWS deployment

# Stage 1: Base dependencies
FROM python:3.12-slim as base

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# Install system dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    git \
    curl \
    wget \
    build-essential \
    && rm -rf /var/lib/apt/lists/*

# Install uv for faster package management
RUN pip install --no-cache-dir uv

# Stage 2: Development dependencies
FROM base as development

# Install additional development tools
RUN apt-get update && apt-get install -y --no-install-recommends \
    vim \
    htop \
    procps \
    && rm -rf /var/lib/apt/lists/*

# Install Playwright for browser automation
RUN pip install playwright && playwright install --with-deps chromium

WORKDIR /app

# Copy requirements first for better caching
COPY requirements.txt .
RUN uv pip install --system -r requirements.txt

# Copy application code
COPY . .

# Create non-root user for security
RUN groupadd -r openmanus && useradd -r -g openmanus openmanus
RUN chown -R openmanus:openmanus /app
USER openmanus

# Expose ports for development
EXPOSE 8000 8080 3000

# Development command
CMD ["python", "main.py"]

# Stage 3: Production base
FROM base as production-base

# Install Playwright for headless browser
RUN pip install playwright && playwright install --with-deps chromium

# Create non-root user
RUN groupadd -r openmanus && useradd -r -g openmanus -d /app openmanus

WORKDIR /app

# Copy requirements and install dependencies
COPY requirements.txt .
RUN uv pip install --system -r requirements.txt

# Stage 4: Production
FROM production-base as production

# Copy application code
COPY --chown=openmanus:openmanus . .

# Create necessary directories
RUN mkdir -p /app/logs /app/workspace /app/config && \
    chown -R openmanus:openmanus /app

USER openmanus

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Expose port
EXPOSE 8000

# Production command
CMD ["python", "-m", "uvicorn", "app.api:app", "--host", "0.0.0.0", "--port", "8000"]

# Stage 5: Render deployment
FROM production as render

# Render-specific environment variables
ENV PORT=8000 \
    RENDER=true

# Use Render's port
EXPOSE $PORT

CMD ["sh", "-c", "python -m uvicorn app.api:app --host 0.0.0.0 --port $PORT"]

# Stage 6: AWS deployment
FROM production as aws

# AWS-specific configurations
ENV AWS_DEPLOYMENT=true

# Install AWS CLI for potential integrations
RUN pip install --no-cache-dir awscli

# AWS health check endpoint
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

EXPOSE 8000

CMD ["python", "-m", "uvicorn", "app.api:app", "--host", "0.0.0.0", "--port", "8000", "--workers", "4"]

